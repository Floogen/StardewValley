@inherits LayoutComponentBase
@layout MainLayout
@inject IScrollManager ScrollManager
@inject HttpClient Http
@using Common.Models
@using Site.Themes
@using System.ComponentModel
@using Site.Utilities.Extensions


<MudLayout>
    <CascadingValue Value="this">
        <PageTitle>@Title</PageTitle>
        <SectionContent SectionName="page-title">@Title</SectionContent>
        <MudContainer id="another_unique_identifier" Class="mt-4" MaxWidth="MaxWidth.False">
            <MudScrollToTop @ref="_scrollToTop">
                <MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.ArrowCircleUp" />
            </MudScrollToTop>
            <MudItem>
                <MudStack Class="mb-6" Justify="Justify.Center" AlignItems="AlignItems.Center" Row="true">
                    <MudPaper Class="flex-none mud-theme-transparent" Width="50%" Elevation="0">
                        <MudTextField Variant="@(MainLayout!.IsDarkMode ? Variant.Outlined : Variant.Filled)" @bind-Value="_searchText" OnKeyUp="UpdateFilter" Label="Search" Immediate="true" ShrinkLabel />
                    </MudPaper>
                    <MudPaper Class="flex-none mud-theme-transparent" Width="256px" Elevation="0">
                        <MudSelect T="SortMethod" Variant="@(MainLayout!.IsDarkMode ? Variant.Text : Variant.Filled)" Value="_sortMethod" ValueChanged="@(e => UpdateSortMethod(e))" OnAdornmentClick="ChangeSortDirection" Label="Sort Method" AdornmentIcon="@(_sortDirection is SortDirection.Ascending ? Icons.Material.Sharp.ArrowUpward : Icons.Material.Sharp.ArrowDownward)" AdornmentColor="Color.Primary">
                            @foreach (SortMethod item in Enum.GetValues(typeof(SortMethod)))
                            {
                                <MudSelectItem Value="@item">
                                    <span style=@("color: " + MainLayout!.GetCurrentPalette().White)>@item.GetDescription()</span>
                                </MudSelectItem>
                            }
                        </MudSelect>
                    </MudPaper>
                </MudStack>
            </MudItem>
            <MudGrid Justify="Justify.Center">
                <MudItem xs="12" sm="6" md="12" lg="12" xl="16">
                    <MudGrid Justify="Justify.Center">
                        @if (_pageToContentPacks.ContainsKey(_selectedPage))
                        {
                            @foreach (var contentPack in _pageToContentPacks[_selectedPage])
                            {
                                <div style="position:relative;">
                                    <MudCard title="@($"{contentPack.ModName} by {contentPack.Author}")" Style="width:325px; height:325px;" Class="ma-2">
                                        <MudLink Href="@contentPack.ModUrl">
                                            <MudImage Width=325 Height=@(contentPack.ModName?.Length >= 50 ? 225 : 250) ObjectFit="ObjectFit.Contain" Src="@contentPack.ImagePath" Alt="..." Elevation="0" Class="rounded-lg" Style="@("background-color: " + MainLayout.GetCurrentPalette().Primary.ColorLighten(0.05))" />
                                        </MudLink>
                                        <MudText Align="Align.Center" Typo="Typo.subtitle2">@contentPack.ModName</MudText>
                                        <div Class="d-flex align-center justify-center">
                                            <MudIcon Icon="@Icons.Material.Outlined.AccountCircle" Size="Size.Small" />&nbsp;@(contentPack.Author)
                                            <br />
                                            <MudText Class="d-flex align-center justify-center" Style="position:absolute; margin-left: auto; margin-right: auto; left: 0; right: 0; bottom: 10px; text-align: center;" Typo="Typo.caption">
                                                <MudIcon Icon="@(_sortMethod is SortMethod.CreatedTimestamp ? Icons.Material.Outlined.Create : Icons.Material.Outlined.Update)" Size="Size.Small" />&nbsp;@($"{(_sortMethod is SortMethod.CreatedTimestamp ? contentPack.CreatedTimestamp.ToShortDateString() : contentPack.LastUpdated.ToShortDateString())}")&nbsp;
                                            </MudText>
                                            <br />
                                            <MudText Class="d-flex align-center justify-start" Style="position:absolute; margin-left: 25px; margin-right: auto; left: 0; right: 0; bottom: 10px; text-align: center;" Typo="Typo.caption">
                                                <MudIcon Icon="@Icons.Material.Outlined.ThumbUp" Size="Size.Small" />&nbsp;@(contentPack.Endorsements)&nbsp;
                                            </MudText>
                                            <MudText Class="d-flex align-center justify-end" Style="position:absolute; margin-left: auto; margin-right: 25px; left: 0; right: 0; bottom: 10px; text-align: center;" Typo="Typo.caption">
                                                <MudIcon Icon="@Icons.Material.Outlined.FileDownload" Size="Size.Small" />&nbsp;@(contentPack.UniqueDownloads)&nbsp;
                                            </MudText>
                                        </div>
                                    </MudCard>
                                </div>
                            }
                        }
                    </MudGrid>
                </MudItem>
                <MudPagination @ref="_mudPagination" Class="pb-4" Style="position:relative; top:25px;" Rectangular="true" Variant="@(MainLayout!.IsDarkMode ? Variant.Outlined : Variant.Filled)" Count="@_pageToContentPacks.Keys.Count" SelectedChanged="@(e => ChangeSelectedPage(e - 1))" />
            </MudGrid>
        </MudContainer>
        @Body
    </CascadingValue>
</MudLayout>

@code {
    [CascadingParameter]
    public MainLayout? MainLayout { get; set; }

    public string Title { get; set; } = "Template";

    private List<ContentPack> ContentPacks { get; set; } = new List<ContentPack>();

    private MudScrollToTop _scrollToTop = default!;
    private MudPagination _mudPagination = default!;

    private const int MAX_CONTENT_PACKS_PER_PAGE = 30;
    private Dictionary<int, List<ContentPack>> _pageToContentPacks = new Dictionary<int, List<ContentPack>>() { { 0, new List<ContentPack>() } };
    private int _selectedPage;

    private string _searchText = string.Empty;
    private SortDirection _sortDirection = SortDirection.Descending;
    private SortMethod _sortMethod = SortMethod.CreatedTimestamp;
    public enum SortMethod
    {
        [Description("Last Updated")]
        LastUpdated,
        [Description("Created Timestamp")]
        CreatedTimestamp,
        Endorsements,
        [Description("Unique Downloads")]
        UniqueDownloads,
        [Description("Mod Name")]
        ModName
    }

    public async Task RefreshContentPacks(string folderPath)
    {
        try
        {
            string contentPacksPath = Path.Combine(folderPath, "content-packs.json");
            string ignoredModsPath = Path.Combine(folderPath, "ignore-list.json");

            var contentPacks = await Http.GetFromJsonAsync<List<ContentPack>>(contentPacksPath);
            if (contentPacks is null)
            {
                // TODO: Log error
                return;
            }
            ContentPacks = contentPacks;

            try
            {
                var ignoredMods = await Http.GetFromJsonAsync<List<IgnoredMod>>(Path.Combine(folderPath, "ignore-list.json"));
                if (ignoredMods is not null && ContentPacks is not null)
                {
                    ContentPacks = ContentPacks.Where(c => ignoredMods is null || ignoredMods.Any(i => i.Id == c.Id) is false).ToList();
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Failed to skip ignored content packs: {ex}");
            }

            UpdateFilter();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to refresh content packs: {ex}");
        }
    }

    private async Task ChangeSelectedPage(int pageNumber)
    {
        _selectedPage = pageNumber;
        await ScrollManager.ScrollToTopAsync(_scrollToTop.Selector, ScrollBehavior.Smooth);
    }

    private void UpdateFilter()
    {
        _selectedPage = 0;
        _pageToContentPacks.Clear();
        _mudPagination.NavigateTo(_selectedPage);
        if (ContentPacks is null)
        {
            // TODO: Log error
            return;
        }

        // Sort the content packs
        var sortedContentPacks = SortContentPacksByMethod(ContentPacks.Where(c => c.HasAdultContent is false).Where(c => string.IsNullOrEmpty(_searchText) || string.IsNullOrEmpty(c.ModName) || c.ModName.Contains(_searchText, StringComparison.OrdinalIgnoreCase)));

        // Iterate through the sorted packs
        int currentPage = 0;
        foreach (var contentPack in sortedContentPacks)
        {
            if (_pageToContentPacks.TryGetValue(currentPage, out var pageContentPacks) && pageContentPacks.Count >= MAX_CONTENT_PACKS_PER_PAGE)
            {
                currentPage += 1;
            }

            if (_pageToContentPacks.ContainsKey(currentPage) is false)
            {
                _pageToContentPacks[currentPage] = new List<ContentPack>();
            }

            _pageToContentPacks[currentPage].Add(contentPack);
        }

        StateHasChanged();
    }

    private IEnumerable<ContentPack> SortContentPacksByMethod(IEnumerable<ContentPack> contentPacks)
    {
        switch (_sortMethod)
        {
            case SortMethod.CreatedTimestamp:
                return _sortDirection is SortDirection.Descending ? contentPacks.OrderByDescending(c => c.CreatedTimestamp) : contentPacks.OrderBy(c => c.CreatedTimestamp);
            case SortMethod.LastUpdated:
                return _sortDirection is SortDirection.Descending ? contentPacks.OrderByDescending(c => c.LastUpdated) : contentPacks.OrderBy(c => c.LastUpdated);
            case SortMethod.Endorsements:
                return _sortDirection is SortDirection.Descending ? contentPacks.OrderByDescending(c => c.Endorsements) : contentPacks.OrderBy(c => c.Endorsements);
            case SortMethod.UniqueDownloads:
                return _sortDirection is SortDirection.Descending ? contentPacks.OrderByDescending(c => c.UniqueDownloads) : contentPacks.OrderBy(c => c.UniqueDownloads);
            case SortMethod.ModName:
                return _sortDirection is SortDirection.Descending ? contentPacks.OrderByDescending(c => c.ModName) : contentPacks.OrderBy(c => c.ModName);
            default:
                return contentPacks;
        }
    }

    private void ChangeSortDirection()
    {
        _sortDirection = _sortDirection is SortDirection.Descending ? SortDirection.Ascending : SortDirection.Descending;

        UpdateFilter();
    }

    private void UpdateSortMethod(SortMethod sortMethod)
    {
        _sortMethod = sortMethod;

        UpdateFilter();
    }
}

